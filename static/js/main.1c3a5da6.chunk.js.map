{"version":3,"sources":["Components/VideoPlayBack/index.js","App.js","serviceWorker.js","index.js"],"names":["VideoPlayBack","state","playing","currentIndex","data","questions","time","questionText","questionId","options","key","value","setPlayerRef","player","playerRef","onPlaybackProgress","console","log","playedSeconds","setState","displayQuestion","length","seekTo","ref","this","controls","onProgress","progressInterval","width","height","url","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"0RAIqBA,E,4MAEjBC,MAAO,CACHC,SAAS,EACTC,aAAc,G,EAGlBC,KAAO,CACHC,UAAW,CACP,CACIC,KAAM,KACNC,aAAc,yDACdC,WAAY,EACZC,QAAS,CACL,CAAEC,IAAK,IAAKC,MAAO,KACnB,CAAED,IAAK,IAAKC,MAAO,MACnB,CAAED,IAAK,IAAKC,MAAO,SAG3B,CACIL,KAAM,KACNC,aAAc,kDACdC,WAAY,EACZC,QAAS,CACL,CAAEC,IAAK,IAAKC,MAAO,aACnB,CAAED,IAAK,IAAKC,MAAO,iBACnB,CAAED,IAAK,IAAKC,MAAO,6BAG3B,CACIL,KAAM,KACNC,aAAc,oCACdC,WAAY,EACZC,QAAS,CACL,CAAEC,IAAK,IAAKC,MAAO,0BACnB,CAAED,IAAK,IAAKC,MAAO,oBACnB,CAAED,IAAK,IAAKC,MAAO,mC,EAMnCC,aAAe,SAACC,GACZ,EAAKC,UAAYD,G,EAIrBE,mBAAqB,SAAAd,GACjBe,QAAQC,IAAIhB,EAAMiB,eACfjB,EAAMiB,eAAiB,EAAKd,KAAKC,UAAU,EAAKJ,MAAME,cAAcG,OACnE,EAAKa,SAAS,CAACjB,SAAS,EAAOkB,gBAAiB,EAAKhB,KAAKC,UAAU,EAAKJ,MAAME,cAAcI,eAC1F,EAAKN,MAAME,aAAe,EAAKC,KAAKC,UAAUgB,OAAQ,GACrD,EAAKF,SAAS,CAAChB,aAAc,EAAKF,MAAME,aAAa,IACrDa,QAAQC,IAAI,EAAKhB,MAAME,cACvB,EAAKW,UAAUQ,OAAO,EAAKlB,KAAKC,UAAU,EAAKJ,MAAME,aAAc,GAAGG,Q,uDAK9E,OACI,6BACI,kBAAC,IAAD,CACIiB,IAAKC,KAAKZ,aACVa,UAAU,EACVvB,QAASsB,KAAKvB,MAAMC,QACpBwB,WAAYF,KAAKT,mBACjBY,iBAAkB,IAClBC,MAAM,QACNC,OAAO,QACPC,IAAI,gDACHN,KAAKvB,MAAMmB,qB,GAtEWW,a,MCQ5BC,MARf,WACE,OACE,6BACE,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlC,QAAQkC,MAAMA,EAAMC,c","file":"static/js/main.1c3a5da6.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport ReactPlayer from \"react-player\";\n\n\nexport default class VideoPlayBack extends Component {\n    \n    state= {\n        playing: true,\n        currentIndex: 0\n    }\n\n    data = {\n        questions: [\n            {\n                time: 1450,\n                questionText: \"How many times a day should you wash your hands a day?\",\n                questionId: 1,\n                options: [\n                    { key: \"1\", value: \"1\"},\n                    { key: \"2\", value: \"10\"},\n                    { key: \"3\", value: \"100\"}\n                ]\n            },\n            {\n                time: 1500,\n                questionText: \"How can you prevent the spread of corona virus?\",\n                questionId: 2,\n                options: [\n                    { key: \"1\", value: \"Isolation\"},\n                    { key: \"2\", value: \"Going to Jobs\"},\n                    { key: \"3\", value: \"Eating Medicine at home\"}\n                ]\n            },\n            {\n                time: 1550,\n                questionText: \"How does the corona virus spread?\",\n                questionId: 3,\n                options: [\n                    { key: \"1\", value: \"Through Air you breath\"},\n                    { key: \"2\", value: \"Through Surfaces\"},\n                    { key: \"3\", value: \"By touching infected people\"}\n                ]\n            }\n        ]\n    }\n\n    setPlayerRef = (player) => {\n        this.playerRef = player;\n    };\n    \n\n    onPlaybackProgress = state => {\n        console.log(state.playedSeconds);\n        if(state.playedSeconds >= this.data.questions[this.state.currentIndex].time){\n            this.setState({playing: false, displayQuestion: this.data.questions[this.state.currentIndex].questionText});\n            if(this.state.currentIndex < this.data.questions.length- 1)\n                this.setState({currentIndex: this.state.currentIndex+1});\n                console.log(this.state.currentIndex);\n                this.playerRef.seekTo(this.data.questions[this.state.currentIndex -1].time)\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <ReactPlayer\n                    ref={this.setPlayerRef}\n                    controls={false}\n                    playing={this.state.playing}\n                    onProgress={this.onPlaybackProgress}\n                    progressInterval={1000}\n                    width=\"300px\"\n                    height=\"300px\" \n                    url=\"https://www.youtube.com/watch?v=ea4GxJIJUjU\"/>            \n                    {this.state.displayQuestion}\n            </div>\n        )\n    }\n}\n","import React from 'react';\nimport VideoPlayBack from './Components/VideoPlayBack/index'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div>\n      <VideoPlayBack />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}